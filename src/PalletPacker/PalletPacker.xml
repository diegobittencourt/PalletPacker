<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PalletPacker</name>
    </assembly>
    <members>
        <member name="T:PalletPacker.Box">
            <summary>
            Box dimensions.
            </summary>
        </member>
        <member name="F:PalletPacker.Box.Dimensions">
            <summary>
            Original box dimensions.
            </summary>
        </member>
        <member name="F:PalletPacker.Box.PackingData">
            <summary>
            Box packing data. Location in the pallet and rotated box dimensions.
            Null if box is not packed.
            </summary>
        </member>
        <member name="M:PalletPacker.Box.Clone">
            <summary>
            Clone the box.
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:PalletPacker.Box.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PalletPacker.Packer">
            <summary>
            Based on algorithm from
            http://www.dtic.mil/dtic/tr/fulltext/u2/a391201.pdf
            Packs a set of boxes into a "big box" pallet using 2d packing layer by layer.
            </summary>
        </member>
        <member name="T:PalletPacker.Packer.PackedPallet">
            <summary>
            Packed pallet data.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.PackedPallet.PalletDimensions">
            <summary>
            Dimensions of the pallet. This is rotated dimensions of the pallet and it
            could be different from specified dimensions.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.PackedPallet.NotPackedBoxes">
            <summary>
            The list of boxes that could not be packed.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.PackedPallet.PackedBoxes">
            <summary>
            The list of boxes that were packed.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.PackedPallet.PackedVolume">
            <summary>
            Total volume of packed boxes.
            </summary>
        </member>
        <member name="P:PalletPacker.Packer.PackedPallet.AllBoxesPacked">
            <summary>
            True if all boxes were packed
            </summary>
        </member>
        <member name="M:PalletPacker.Packer.PackedPallet.PackBox(PalletPacker.Box)">
            <summary>
            Pack the specified box.
            </summary>
            <param name="box"></param>
        </member>
        <member name="T:PalletPacker.Packer.SelectedBox">
            <summary>
            The box selected for packing.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.SelectedBox.Box">
            <summary>
            Found box.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.SelectedBox.PackedDimensions">
            <summary>
            Packed box dimensions. If orientation of the box did not change during packing
            this value is the same as box Dimensions field.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.SelectedBox.DeltaFromIdeal">
            <summary>
            Absolute difference between ideal box and currently best box.
            Parameter used in next best suited box search. Trying to minimize it.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.SelectedBox.FitsInLayer">
            <summary>
            True if current box fits in layer. Boxes that fit in layer are better
            than not fitting ones.
            </summary>
        </member>
        <member name="M:PalletPacker.Packer.SelectedBox.IsBetterFit(System.Boolean,PalletPacker.Point3D)">
            <summary>
            Check if the new box evaluation parameters are better than current ones.  
            </summary>
            <param name="newFitsInLayer"></param>
            <param name="newDelta"></param>
            <returns>True if new box is better. False if not.</returns>
        </member>
        <member name="T:PalletPacker.Packer.Layer">
            <summary>
            Packing layer.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.Layer.LayerThickness">
            <summary>
            Layer thickness. Y dimension of the layer.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.Layer.MinDifferenceTotal">
            <summary>
            The total sum of differences of all boxes between this layer thickness and
            dimension of the box that is closest to the layer thickness.
            </summary>
        </member>
        <member name="M:PalletPacker.Packer.Layer.ToString">
            <summary>
            String representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:PalletPacker.Packer.layers">
            <summary>
            The list of all possible packing layers created from each possible box dimension
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.TimeoutMilliseconds">
            <summary>
            Packing timeout milliseconds. Null for no timeout.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.PackingIterationLimit">
            <summary>
            Packing iteration limit. Null for no iteration limit.
            </summary>
        </member>
        <member name="F:PalletPacker.Packer.IterationCount">
            <summary>
            The number of pallete packing attempts. Value is initialized to 0 and then increased by one before 
            each packing attempt.
            </summary>
        </member>
        <member name="M:PalletPacker.Packer.Pack(System.Collections.Generic.List{PalletPacker.Box},PalletPacker.Point3D)">
            <summary>
            Pack the list of boxes into a pallet. In other words put small boxes into a big one.
            Function packs pallet in layers and tries all pallet rotations and all possible 
            starting layer sizes.
            Returned pallet could be null if the list of boxes was empty or packed pallet that may
            contains all or only some boxes.
            Packing is done in the loop each time incrementing IterationCount field.
            Packing stops when either all boxes fit in the pallet, packing times out or the number of packing iterations
            is above the specified limit.
            </summary>
            <param name="boxList">The list of boxes to pack.</param>
            <param name="palletSize">Pallet dimensions.</param>
            <returns>Null if box list is empty or packed pallet</returns>
        </member>
        <member name="M:PalletPacker.Packer.CreateLayers(System.Collections.Generic.List{PalletPacker.Box},PalletPacker.Point3D)">
            <summary>
            Generate the list of all possible layers that can fit in the pallet.
            All box dimensions are used when generating layers. For example if 
            box dimensions are 1,2,3 then three layers could be created and if box
            dimensions are 1,2,2 then only two layers are possible.
            </summary>
            <param name="boxList"></param>
            <param name="pallet"></param>
            <returns>The list of layers</returns>
        </member>
        <member name="M:PalletPacker.Packer.PackPallet(PalletPacker.Packer.Layer,System.Collections.Generic.List{PalletPacker.Box},PalletPacker.Point3D)">
            <summary>
            Pack boxes into a pallet starting with specified layer thickness.
            The minor "optimization" here is sub-layer packing that is performed
            if not enough boxes are available in the layer and layer has to grow to
            accomodate bigger available boxes
            </summary>
            <param name="startLayer">The layer to start with</param>
            <param name="boxList">All boxes to pack</param>
            <param name="palletDimensions">Dimensions of the pallet</param>
            <returns>Packed pallet object</returns>
        </member>
        <member name="M:PalletPacker.Packer.FindLayer(System.Collections.Generic.List{PalletPacker.Box},PalletPacker.Point3D)">
            <summary>
            Find the next layer to pack given the list of remaining boxes and the space 
            in the pallet.
            This function tries to find the layer thickness that would have the maximum "smoothness".
            i.e. the difference between selected layer thickness and total diff 
            between layer thickness and remaining boxes would be minimal.
            </summary>
            <param name="notPackedBoxes">The list of boxes that still need packing</param>
            <param name="maxSpaceRemaining">The space that is still available</param>
            <returns>The next layer thickness or 0 if suitable boxes do not exist</returns>
        </member>
        <member name="M:PalletPacker.Packer.CalculateMinDiffTotal(System.Collections.Generic.List{PalletPacker.Box},PalletPacker.Box,System.Int64)">
            <summary>
            Calculate the total of absolute minimum differences between layerThickness and 
            X,Y and Z dimensions of all boxes
            </summary>
            <param name="boxList">The list of boxes to check</param>
            <param name="excludeBox">Exclude this box from checking</param>
            <param name="layerThickness">The value we are comparing to</param>
            <returns>The total of minimum absolute differences</returns>
        </member>
        <member name="M:PalletPacker.Packer.PackLayer(PalletPacker.Packer.PackedPallet,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Pack one layer. If during packing some boxes become taller than layerThickness then 
            increase the layer thickness to accomodate them.
            </summary>
            <param name="pallet">Pallet that is being packed</param>
            <param name="layerBottomY">The bottom Y coordinate of this layer</param>
            <param name="layerThickness">The thickness (Y) of this layer</param>
            <param name="maxThickness">The max thickness possible for this layer in the pallet</param>
            <param name="layerZlimit">The Z limit for this layer. Usually the pallet size but in case of
            sub-layer it can be less</param>
            <returns></returns>
        </member>
        <member name="M:PalletPacker.Packer.FindBox(System.Collections.Generic.List{PalletPacker.Box},PalletPacker.Point3D,PalletPacker.Point3D)">
            <summary>
            Find the box that fits in maximumBox and if possible is closest to an idealBox
            </summary>
            <param name="notPackedBoxes">All available boxes</param>
            <param name="idealBox">The ideal box we are looking for</param>
            <param name="maximumBox">The absolute max dimensions that could be packed</param>
            <returns>The box that could be packed</returns>
        </member>
        <member name="M:PalletPacker.Packer.ShouldCancelPacking">
            <summary>
            Check if timeout was reached or if number of iterations is above the limit.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PalletPacker.PackingData">
            <summary>
            Box packing data. 
            </summary>
        </member>
        <member name="F:PalletPacker.PackingData.PackedDimensions">
            <summary>
            Packed box dimensions. If orientation of the box did not change during packing
            this value is the same as box Dimensions field.
            </summary>
        </member>
        <member name="F:PalletPacker.PackingData.PackedLocation">
            <summary>
            Packed box location in the pallet.
            </summary>
        </member>
        <member name="M:PalletPacker.PackingData.Clone">
            <summary>
            Clone the box.
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:PalletPacker.PackingData.ToString">
            <inheritdoc/>
        </member>
        <member name="T:PalletPacker.PackLine">
            <summary>
            Packing line representing the X,Z graph of packed boxes in layer.
            Here X is horizontal coordinate and Z is vertical one.
            </summary>
        </member>
        <member name="T:PalletPacker.PackLine.Segment">
            <summary>
            The segment of the packing line.
            </summary>
        </member>
        <member name="F:PalletPacker.PackLine.Segment.Left">
            <summary>
            Left and right neighbors of this segment
            </summary>
        </member>
        <member name="F:PalletPacker.PackLine.Segment.Right">
            <summary>
            Left and right neighbors of this segment
            </summary>
        </member>
        <member name="F:PalletPacker.PackLine.Segment.RightX">
            <summary>
            The right X coordinate of the segment.
            </summary>
        </member>
        <member name="F:PalletPacker.PackLine.Segment.Z">
            <summary>
            The Z coordinate of the segment.
            </summary>
        </member>
        <member name="P:PalletPacker.PackLine.Segment.LeftX">
            <summary>
            Left x coordinate of the segment.
            </summary>
        </member>
        <member name="P:PalletPacker.PackLine.Segment.Width">
            <summary>
            Segment width
            </summary>
        </member>
        <member name="P:PalletPacker.PackLine.Segment.NoSegmentsOnSides">
            <summary>
            True if segment is the only one.
            </summary>
        </member>
        <member name="P:PalletPacker.PackLine.Segment.NoLeftSegment">
            <summary>
            True if segment has no left neighbor, i.e. this is the leftmost segment.
            </summary>
        </member>
        <member name="P:PalletPacker.PackLine.Segment.NoRightSegment">
            <summary>
            True if segment has no right neighbor, i.e. this is the rightmost segment.
            </summary>
        </member>
        <member name="M:PalletPacker.PackLine.Segment.RemoveRight">
            <summary>
            Remove segment on the right side and extend current segment.
            Keep the same Z value.
            </summary>
        </member>
        <member name="M:PalletPacker.PackLine.Segment.RemoveSelf">
            <summary>
            Remove this element from the list.
            If segment on the left exists then extend left Z. Otherwise extend right Z.
            </summary>
        </member>
        <member name="M:PalletPacker.PackLine.Segment.InsertLeft(PalletPacker.Point3D)">
            <summary>
            Add X,Z box on the left side of the segment.
            Assumes box size that is narrower than the width of the segment.
            </summary>
            <param name="boxSize"></param>
            <returns>Newly created segment on the left</returns>
        </member>
        <member name="M:PalletPacker.PackLine.Segment.AddZ(System.Int64)">
            <summary>
            Raise the Z of the current segment by specified value.
            If Z of the segment becomes equal to left or right neighbor then
            eliminate consecutive segments having the same Z value.
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:PalletPacker.PackLine.Segment.AddLeftZ(PalletPacker.Point3D)">
            <summary>
            Add the box to the left side.
            </summary>
            <param name="boxSize"></param>
        </member>
        <member name="M:PalletPacker.PackLine.Segment.FillValley">
            <summary>
            Raise the Z of the segment to the Z value of the neighbor.
            If segment has no neighbors then do nothing.
            If segment has two neighbors then use the lower Z value of the two.
            </summary>
        </member>
        <member name="F:PalletPacker.PackLine.FirstSegment">
            <summary>
            The leftmost segment of the packing line.
            </summary>
        </member>
        <member name="M:PalletPacker.PackLine.#ctor(System.Int64)">
            <summary>
            Initialize the class with specified width.
            </summary>
            <param name="maxWidth"></param>
        </member>
        <member name="M:PalletPacker.PackLine.FindValley">
            <summary>
            Find the segment with minimal Z value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PalletPacker.PackLine.AddZ(PalletPacker.PackLine.Segment,PalletPacker.Point3D)">
            <summary>
            Add X,Z box to the segment of the pack line.
            This method assumes dimensions that are no wider than the segment.
            If segment is wider than dimensions being added then box is added
            to the left side of the segment.
            </summary>
            <param name="valley"></param>
            <param name="dimensions"></param>
        </member>
        <member name="T:PalletPacker.Point3D">
            <summary>
            3d dimension or location in 3d space
            </summary>
        </member>
        <member name="F:PalletPacker.Point3D.X">
            <summary>
            X coordinate or dimension
            </summary>
        </member>
        <member name="F:PalletPacker.Point3D.Y">
            <summary>
            Y coordinate or dimension 
            </summary>
        </member>
        <member name="F:PalletPacker.Point3D.Z">
            <summary>
            Z coordinate or dimension
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.Volume">
            <summary>
            Volume calculated from dimensions
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.IsCube">
            <summary>
            True if all coordinates are equal and this is cube 
            </summary>
        </member>
        <member name="M:PalletPacker.Point3D.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Create the point object
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:PalletPacker.Point3D.ContainsDimension(PalletPacker.Point3D)">
            <summary>
            Check if all coordinates of other point are less or equal to the coordinates of
            this point.
            </summary>
            <param name="otherDimension"></param>
            <returns>True if all dimensions of other point are less or equal. False otherwise</returns>
        </member>
        <member name="M:PalletPacker.Point3D.AbsoluteDiff(PalletPacker.Point3D)">
            <summary>
            Return the absolute differences of all coordinate values
            </summary>
            <param name="otherPoint">The point to calculate differences from</param>
            <returns></returns>
        </member>
        <member name="M:PalletPacker.Point3D.MinDiff(System.Int64)">
            <summary>
            Returns minimum absolute difference between X, Y and Z fields and
            specified value.
            </summary>
            <param name="dimension">Value used for difference calculations</param>
            <returns></returns>
        </member>
        <member name="P:PalletPacker.Point3D.AsYXZ">
            <summary>
            Return point object with swapped coordinates
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.AsZXY">
            <summary>
            Return point object with swapped coordinates
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.AsXZY">
            <summary>
            Return point object with swapped coordinates
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.AsYZX">
            <summary>
            Return point object with swapped coordinates
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.AsZYX">
            <summary>
            Return point object with swapped coordinates
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.AllRotations">
            <summary>
            All 6 possible combinations of X,Y and Z coordinates
            </summary>
        </member>
        <member name="P:PalletPacker.Point3D.YDimensionVariants">
            <summary>
            3 different Y coordinate variations 
            </summary>
        </member>
        <member name="M:PalletPacker.Point3D.WithYZ(System.Int64,System.Int64)">
            <summary>
            Return copy of the object with specified Y and Z coordinates.
            </summary>
            <param name="otherY"></param>
            <param name="otherZ"></param>
            <returns></returns>
        </member>
        <member name="M:PalletPacker.Point3D.SubtractY(System.Int64)">
            <summary>
            Subtract value from Y coordinate.
            </summary>
            <param name="deltaY"></param>
            <returns></returns>
        </member>
        <member name="M:PalletPacker.Point3D.ToString">
            <summary>
            String representation of the point.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
